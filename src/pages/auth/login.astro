---
import LoginForm from "@/components/auth/LoginForm.astro";
import PinOtpForm from "@/components/ui/PinOtpForm.astro";
import AuthLayout from "@/layouts/AuthLayout.astro";
---

<AuthLayout title="Login" description="Login">
    <section
        class="auth-container h-[80vh] px-6 md:px-0 flex flex-col items-center justify-center space-y-6"
    >
        <LoginForm />
    </section>
    <div class="otp-container container mt-12 mx-auto">
        <div
            class="mx-auto flex flex-col items-center justify-center space-y-4"
        >
            <h1 class="text-3xl font-bold">Two Factor Authentication</h1>
            <p class="text-lg opacity-90">
                Please enter the code sent to your phone.
            </p>
            <div class="mx-auto">
                <PinOtpForm />
            </div>
        </div>
    </div>
</AuthLayout>

<script>
    // --- Imports ---
    import { actions } from "astro:actions";
    import { signIn } from "auth-astro/client";

    // --- DOM Elements ---
    const signInButton = document.querySelector(
        "#sign-in-button",
    ) as HTMLButtonElement;
    const form = document.querySelector("#login-form") as HTMLFormElement;
    const authContainer = document.querySelector(
        ".auth-container",
    ) as HTMLElement;
    const otpContainer = document.querySelector(
        ".otp-container",
    ) as HTMLElement;
    const otpForm = document.querySelector(".otp-form") as HTMLFormElement;
    const submitBtn = document.querySelector(
        ".submit-btn",
    ) as HTMLButtonElement;
    const resendBtn = document.querySelector(
        ".resend-btn button",
    ) as HTMLButtonElement;
    const inputs = document.querySelectorAll(
        ".opt-bx input",
    ) as NodeListOf<HTMLInputElement>;

    // --- Variables ---
    let email = "";
    let password = "";

    // --- Functions ---
    const setLoadingState = (
        button: HTMLButtonElement,
        isLoading: boolean,
        text: string,
    ) => {
        button.innerHTML = isLoading ? `${text}...` : text;
        button.disabled = isLoading;
    };

    const switchToOTP = () => {
        authContainer.style.opacity = "0";
        setTimeout(() => {
            authContainer.style.display = "none";
            otpContainer.style.display = "block";
            otpContainer.style.opacity = "1";
        }, 400);
    };

    const handleSignIn = async (e: Event) => {
        e.preventDefault();
        setLoadingState(signInButton, true, "Login");

        const formData = new FormData(form);
        email = (formData.get("email") as string) || "";
        password = (formData.get("password") as string) || "";

        try {
            const { data, error } = await actions.loginUser(formData);

            if (error) {
                alert(error.message);
                return;
            }

            if (data?.status === "verification") {
                switchToOTP();
            } else if (data?.status === "success") {
                await signIn("credentials", {
                    email,
                    password,
                    redirect: false,
                });
            }
        } catch (err) {
            console.error(err);
        } finally {
            setLoadingState(signInButton, false, "Login");
        }
    };

    const handleOtpPaste = (e: ClipboardEvent) => {
        const pastedText = e.clipboardData?.getData("text");
        if (pastedText && pastedText.length === inputs.length) {
            inputs.forEach((input, index) => {
                input.value = pastedText[index];
            });
            submitBtn.removeAttribute("disabled");
        }
    };

    const handleOtpKeyUp = (e: KeyboardEvent) => {
        const currentElement = e.target as HTMLInputElement;
        const nextElement =
            currentElement.nextElementSibling as HTMLInputElement;
        const previousElement =
            currentElement.previousElementSibling as HTMLInputElement;

        if (e.key === "Backspace" && previousElement) {
            previousElement.focus();
            previousElement.value = "";
            submitBtn.setAttribute("disabled", "disabled");
        } else if (currentElement.value) {
            if (nextElement) {
                nextElement.focus();
            } else {
                submitBtn.removeAttribute("disabled");
            }
        }
    };

    const handleOtpSubmit = async (e: Event) => {
        e.preventDefault();
        setLoadingState(submitBtn, true, "Submit");

        const otpValues = Array.from(inputs)
            .map((input) => input.value)
            .join("");
        if (otpValues.length !== 6) {
            alert("Please enter the correct code");
            setLoadingState(submitBtn, false, "Submit");
            return;
        }

        try {
            const { data, error } = await actions.verifyTwoFactorAuthentication({
                code: otpValues,
                email,
            });
            
            if (data?.status === "success") {
                await signIn("credentials", {
                    email,
                    password,
                    redirect: false,
                });
            } else {
                alert("Invalid code");
            }
        } catch (err) {
            console.error(err);
        } finally {
            setLoadingState(submitBtn, false, "Submit");
        }
    };

    const handleResendClick = () => {
        alert("TODO: Send a new code to the user's phone");
    };

    // --- Event Listeners ---
    signInButton.onclick = handleSignIn;
    inputs.forEach((input) => {
        input.addEventListener("paste", handleOtpPaste);
        input.addEventListener("keyup", handleOtpKeyUp);
    });
    if (otpForm) otpForm.addEventListener("submit", handleOtpSubmit);
    if (resendBtn) resendBtn.addEventListener("click", handleResendClick);
</script>

<style>
    .auth-container {
        background: rgb(2, 0, 36);
        background: linear-gradient(
            360deg,
            rgba(2, 0, 36, 0) 0%,
            rgba(9, 9, 121, 0) 44%,
            rgba(0, 212, 255, 0.2) 100%
        );
    }

    .otp-container {
        display: none;
    }

    #authContainer,
    #otpContainer {
        transition: opacity 0.1s ease;
    }
</style>
